/*:
 # Aprendendo SwiftUI - Experimento 2
 
 ## Entendendo a Estrutura de uma View no SwiftUI
 
 Antes de mergulharmos no c√≥digo, vamos entender a estrutura b√°sica de uma View no SwiftUI e como as diferentes partes se unem para criar a interface do usu√°rio.
 
 ## View
 
 No SwiftUI, uma View √© representada como uma struct. Uma struct no Swift √© uma maneira de combinar propriedades e m√©todos relacionados. Neste caso, a View √© nossa combina√ß√£o visual de elementos na tela.
*/
struct ContentView: View {
    // C√≥digo da View aqui...
    var body: some View {
        // Retorno da hierarquia de visualiza√ß√£o (estrutura da View)
        //#-hidden-code
        VStack {
            
        }
        //#-end-hidden-code
    }
}
/*:
 ## Propriedades e Personaliza√ß√£o
 
 Uma das for√ßas do SwiftUI √© a personaliza√ß√£o. Ao adicionar propriedades √† nossa View, podemos moldar e adaptar nossa View de maneira din√¢mica.
 
*/
struct MyTextView: View {
    var userText: String = "Ol√°, Mundo!"// Propriedade
    
    var body: some View {
        Text(userText) // Utilizando a propriedade na View
    }
}
/*:
 
 ## `import` e Frameworks
 
 A instru√ß√£o `import traz ferramentas e funcionalidades de frameworks externos. Com ela, expandimos as capacidades de nossa aplica√ß√£o.
 
 */
import SwiftUI // Importando o framework SwiftUI
/*:
 
 ## `Preview` e Visualiza√ß√£o Interativa
 
 Com o SwiftUI, podemos ver nossas mudan√ßas em tempo real, gra√ßas ao `PreviewProvider`.
 
*/
struct MyTextView_Previews: PreviewProvider {
    static var previews: some View {
        MyTextView(userText: "Hello, SwiftUI!") // Visualiza√ß√£o interativa da View
    }
}


/*:
 
 ## Desafio 1
 
 Agora que voc√™ j√° aprendeu como criar uma View b√°sica e como usar propriedades para personalizar essa View, vamos colocar isso em pr√°tica.
 
 1. Adicione uma nova vari√°veis `String` chamada `name` na view.
 2. Adicione outras duas vari√°veis do tipo `Float`, chamadas `weight` e `height`.
 3. Use essas vari√°veis para mostrar um texto no formato: "[name] est√° com [weight] quilos e [height] cm de altura".

 Por exemplo, se voc√™ definir `nome` como "Samuel", `weight` como 70 e height como 1.73, o resultado deve ser: "Samuel est√° com 70 quilos e 1.73 m de altura".
 
 üí° *Dica:  Use a View `Text` para exibir sua mensagem.*
 
*/

import SwiftUI
import PlaygroundSupport

struct Challenge1View: View {
    //#-editable-code
    // Adicione as vari√°veis aqui
    
    
    var body: some View {
        VStack {
            // Adicione as Views aqui
            
        }
    }
    //#-end-editable-code
}

/*:

  ## Structs

  ### 1. O que √© uma Struct?

  Em Swift, a `struct` √© uma forma de agrupar propriedades (como vari√°veis e constantes) e comportamentos (como fun√ß√µes) relacionados em uma √∫nica unidade. Pense nisso como criar um novo tipo de dado!

  üß† ***Dica Intelectual:** Em termos t√©cnicos, uma `struct` √© um tipo de valor. Isso significa que quando voc√™ passa uma `struct` de uma fun√ß√£o para outra, ela √© copiada, n√£o referenciada.*

  ### 2. Montando sua Primeira Estrutura

 Podemos usar uma `struct` para representar um livro:

  ```swift
  struct Book {
      var title: String
      var author: String
      var pages: Int
  }
  ```

  Agora, temos um novo tipo chamado `Book` que pode armazenar um t√≠tulo, autor e n√∫mero de p√°ginas.

  ### 3. Fun√ß√µes

  Voc√™ pode n√£o apenas armazenar informa√ß√µes em sua `struct`, mas tamb√©m definir a√ß√µes que fazem sentido para ela:

  ```swift
  struct Book {
      var title: String
      var author: String
      var pages: Int
      
      func description() -> String {
          return "\(title) √© um livro de \(author) com \(pages) p√°ginas."
      }
  }
  ```

  ### 4. Deixe a Estrutura Trabalhar para Voc√™

  Agora, voc√™ pode criar um novo livro e descobrir sua descri√ß√£o em um piscar de olhos:

  ```swift
  let myFavoriteBook = Book(title: "Swift Avan√ßado", author: "Maria Jos√©", pages: 300)
  print(myFavoriteBook.description())
  ```

  üéâ **Resultado:** `Swift Avan√ßado √© um livro de Maria Jos√© com 300 p√°ginas.`


 
 ## Desafio 2
 
 Como agora voc√™ j√° sabe Structs, vamos recriar a View do Desafio 1, agora usando `Struct`.
 
 1. Crie uma nova `Struct` chamada `Pessoa` com as vari√°veis `name`, `weight` e `height`.
 2. Crie uma fun√ß√£o `imcDescription` dentro de `Pessoa` que retorna uma `String`: "[name] est√° com um imc igual a [c√°lculo do imc (peso/altura^2)]"
 3. Adicione uma vari√°vel do tipo `Pessoa` na View.
 4. Adicione um Text na View e chame a fun√ß√£o ``
 
 Por exemplo, se voc√™ definir `nome` como "Samuel", `weight` como 70 e height como 1.73, o resultado deve ser: "Samuel est√° com um imc igual a 23.38"
 
 üí° *Dica:  Voc√™ pode fazer c√°lculos diretamente na interpola√ß√£o de strings (`\(vari√°vel)`)*

*/

import SwiftUI
import PlaygroundSupport

//#-editable-code
// Adicione os Structs aqui


//#-end-editable-code
struct Challenge2View: View {
    //#-editable-code
    // Adicione as vari√°veis aqui
    
    
    var body: some View {
        VStack {
            // Adicione as Views aqui
            
        }
    }
    //#-end-editable-code
}

/*:
 
 ## Desafio 3: Usando `import`
 
 J√° vimos que √© poss√≠vel importar frameworks com a keyword `import`.
 
 1. Importe o framework `Foundation`.
 2. Use a classe `Date` do framework `Foundation` para exibir a data atual na sua View.
 
*/
//#-editable-code
// Adicione os imports aqui
import SwiftUI
import PlaygroundSupport


//#-end-editable-code

struct Challenge3View: View {
    //#-editable-code
    // Adicione as vari√°veis aqui
    
    
    var body: some View {
        VStack {
            // Adicione as Views aqui
            
            
        }
    }
    //#-end-editable-code
}

/*:
 
 ## Refletindo

 - **Autoavalia√ß√£o:** Em uma escala de 1 a 5, qu√£o confort√°vel voc√™ se sente ao criar e personalizar Views em SwiftUI?

 1. üôÅ N√£o me sinto confort√°vel.
 2. üòê Entendi o b√°sico, mas preciso de mais pr√°tica.
 3. üòå Sinto-me moderadamente confort√°vel.
 4. üòä Estou bastante confort√°vel, mas ainda tenho algumas d√∫vidas.
 5. üòÑ Muito confiante!

 - **Desafios:**
    - Qual aspecto das `structs` voc√™ achou mais desafiador de compreender?
    - Ao trabalhar com Views, houve algum momento em que voc√™ se sentiu particularmente confuso?

 - **Aplica√ß√µes Pr√°ticas:** Pense sobre os aplicativos que voc√™ usa diariamente ou sobre os projetos que gostaria de criar.
    - Como voc√™ pode estruturar as informa√ß√µes e as interfaces de usu√°rio usando `structs` e Views?

 - **Feedback:**
     - Achou que algo poderia ser abordado de forma diferente?
     - Achou que algum t√≥pico precisava de mais exemplos pr√°ticos ou uma explica√ß√£o mais aprofundada?

 ### Escreva as reflex√µes nos coment√°rios:
*/
//#-hidden-code
/*
//#-end-hidden-code
 
//#-editable-code
 Autoavalia√ß√£o:
 
 Desafios:
 
 Aplica√ß√µes Pr√°ticas:
 
 Feedback:

//#-end-editable-code
//#-hidden-code
*/
struct ContentView2: View {
    @State private var selectedExampleIndex = 0
    
    var body: some View {
        VStack(spacing: 20) {
            Picker(selection: $selectedExampleIndex, label: Text("Selecione o Desafio")) {
                Text("Desafio 1").tag(0)
                Text("Desafio 2").tag(1)
                Text("Desafio 3").tag(2)
            }
            .pickerStyle(SegmentedPickerStyle())
            
            Spacer()
            
            if selectedExampleIndex == 0 {
                Challenge1View()
            } else if selectedExampleIndex == 1 {
                Challenge2View()
            } else {
                Challenge3View()
            }
            Spacer()
        }
        .padding()
    }
}
let contentView = ContentView2()
PlaygroundPage.current.setLiveView(contentView)
//#-end-hidden-code

