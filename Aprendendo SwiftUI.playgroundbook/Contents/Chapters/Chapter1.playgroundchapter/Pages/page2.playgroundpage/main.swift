/*:

# Aprendendo SwiftUI - Experimento 1

## Como funciona um Texto?

 Antes de entrarmos no SwiftUI, imagine que voc√™ tem um quadro-negro onde pode escrever qualquer coisa. Em SwiftUI, esse quadro-negro √© o nosso 'Text', e o que escrevemos nele s√£o as nossas 'Strings'.

## Vari√°veis e Tipos de Dados

**Vari√°vel** √© como uma mochila onde voc√™ pode armazenar diferentes tipos de itens: livros (textos), l√°pis (n√∫meros) e at√© mesmo uma lanterna que pode estar ligada (verdadeiro) ou desligada (falso).

- **String:** Armazena textos.
```swift
var name: String = "Jo√£o"
```

- **Int:** Armazena n√∫meros inteiros.
```swift
var age: Int = 25
```

- **Double:** N√∫meros com casas decimais.
```swift
var height: Double = 1.75
```

- **Bool:** Valores verdadeiro (`true`) ou falso (`false`).
```swift
var isLoading: Bool = true
```

 üí° *Dica: Pense em vari√°veis como etiquetas que podem ser coladas em diferentes itens.*


 ## Opcionais e Nil

 √Äs vezes, voc√™ n√£o sabe se sua mochila tem um item espec√≠fico. Em Swift, usamos **opcionais** para isso. Eles nos dizem se h√° algo na mochila (`valor`) ou se est√° vazia (`nil`).

  ```swift
  var age: Int? = nil
  ```

 ## Texto em SwiftUI

 Agora, com sua mochila de vari√°veis pronta, vamos aprender como mostr√°-las usando o `Text` em SwiftUI!

 ```swift
 Text("Ol√°, mundo!")
 ```

 
## Exibindo um Texto usando uma vari√°vel

Agora que entendemos vari√°veis e tipos de dados, vamos aprender como usar a vari√°vel para exibir um texto personalizado no SwiftUI. Vamos modificar o c√≥digo para exibir o nome do usu√°rio usando uma vari√°vel:

Primeiro, vamos declarar uma vari√°vel chamada `nome` do tipo `String` e atribuir um valor a ela:

```swift
var nome: String = "Maria"
```

Em seguida, vamos usar essa vari√°vel para exibir o texto personalizado:

```swift
Text("Ol√°, \(nome)!")
```

## Exibindo um Texto Padr√£o (Placeholder)
 
 Teremos v√°rios casos onde ser√° necess√°rio mostrar um texto padr√£o caso algum valor seja nulo. Por exemplo, se um usu√°rio n√£o fornecer seu nome, o normal √© aparecer "Sem Nome", ao inv√©s de nada:
 
 Primeiro, vamos declarar uma vari√°vel opcional chamada `nome` do tipo `String`:
 
 ```swift
 var nome: String?
 ```
 O resultado final vai ser modificado somente se escrevermos algum texto em `nome`.
 ```swift
 nome = "Jo√£o"
 ```
 Para escrever um texto padr√£o, √© necess√°rio escrever um novo operador `??` ap√≥s o uso da vari√°vel opcional:
 
 ```swift
 Text(nome ?? "Sem Nome")
 ```
 Note que o `??` verifica se nome √© nulo. Se nome for nulo, escreve "Sem Nome". Se nome tiver preenchido, escrevemos o nome, "Jo√£o".
 
 
 ## Desafio 1

 1. Crie uma vari√°vel chamada `nome` e mostre ela no `Text`:
 ```swift
 var nome: String = "Maria"
 Text("Ol√°, \(nome)!")
 ```
*/

 import SwiftUI
 import PlaygroundSupport

 struct Challenge1View: View {
     //#-editable-code
     // Adicione a vari√°vel aqui
     
     
     //#-end-editable-code
     var body: some View {
         VStack {
             //#-editable-code
             // Adicione o Text aqui
             
             //#-end-editable-code
         }
         //#-hidden-code
         .padding()
         //#-end-hidden-code
     }
 }
 
/*:
 
 
 2. O que acontece se o nome for opcional e estiver vazio? Tente aplicar isso no Desafio 1.

 ```swift
 var nome: String?
 nome = "Jo√£o"
 Text(nome ?? "Sem Nome")
 ```
 
üí° *Dica: Usamos `??` para verificar se h√° um valor na nossa mochila opcional.*

## Modificando a Apar√™ncia de um Texto

No SwiftUI, voc√™ pode facilmente modificar a apar√™ncia do texto, como fonte, cor e alinhamento. Vamos ver alguns exemplos:

1. **Modificando a Fonte:**
```swift
Text("Texto com Fonte Personalizada")
    .font(.title)
```

2. **Alterando a Cor:**
```swift
Text("Texto em Azul")
    .foregroundColor(.blue)
```

3. **Alinhamento do Texto:**
```swift
Text("Texto Centralizado")
    .multilineTextAlignment(.center)
```

## Desafio 2

Use o espa√ßo abaixo para experimentar! Crie seu pr√≥prio estilo para o texto.

*/

import SwiftUI
import PlaygroundSupport

struct Challenge2View: View {
    //#-editable-code
    @State private var myText: String? = "Me Configure!"
    //#-end-editable-code
    var body: some View {
        VStack {
            //#-editable-code
            Text(myText ?? "Texto Padr√£o")
                .font(.title)
                .foregroundColor(.blue)
            //#-end-editable-code
        }
        //#-hidden-code
        .padding()
        //#-end-hidden-code
    }
}

/*:

...

## Desafio 3

Agora que voc√™ sabe como trabalhar com `Text` e vari√°veis, tente criar uma sauda√ß√£o personalizada usando o nome e a idade do usu√°rio.

1. Crie duas vari√°veis: `nome` e `idade`.
2. Use essas vari√°veis para mostrar um texto no formato: "Ol√°, [nome]! Voc√™ tem [idade] anos!".

Por exemplo, se voc√™ definir `nome` como "Maria" e `idade` como 20, o resultado deve ser: "Ol√°, Maria! Voc√™ tem 20 anos!".

üí° *Dica: Lembre-se de usar interpola√ß√£o de strings (usando `\(vari√°vel)`) para incluir vari√°veis dentro do seu texto.*

*/

struct Challenge3View: View {
    //#-editable-code
    // Adicione as vari√°veis aqui
    
    
    //#-end-editable-code
    var body: some View {
        VStack {
            //#-editable-code
            // Adicione o Text aqui
            
            //#-end-editable-code
        }
        //#-hidden-code
        .padding()
        //#-end-hidden-code
    }
}

/*:
 ## Refletindo

 - **Autoavalia√ß√£o:** Em uma escala de 1 a 5, qu√£o confort√°vel voc√™ se sente usando o `Text` em SwiftUI agora?
 1. üôÅ N√£o me sinto confort√°vel.
 2. üòê Entendi o b√°sico, mas preciso de mais pr√°tica.
 3. üòå Sinto-me moderadamente confort√°vel.
 4. üòä Estou bastante confort√°vel, mas ainda tenho algumas d√∫vidas.
 5. üòÑ Muito confiante!
 
 - **Desafios:** Qual foi o desafio mais interessante? Havia algum conceito que voc√™ achou dif√≠cil de entender inicialmente?

 - **Aplica√ß√µes Pr√°ticas:** Em quais situa√ß√µes do mundo real voc√™ acha que pode aplicar o que aprendeu hoje sobre `Text`?

 - **Feedback:** Achou que algo poderia ser abordado de forma diferente?

 
### Escreva as reflex√µes nos coment√°rios:
*/
//#-hidden-code
/*
//#-end-hidden-code
 
//#-editable-code
 Autoavalia√ß√£o:
 
 Desafios:
 
 Aplica√ß√µes Pr√°ticas:
 
 Feedback:

//#-end-editable-code
//#-hidden-code
*/
struct ContentView: View {
    @State private var selectedExampleIndex = 0

    var body: some View {
        VStack(spacing: 20) {
            Picker(selection: $selectedExampleIndex, label: Text("Selecione o Desafio")) {
                Text("Desafio 1").tag(0)
                Text("Desafio 2").tag(1)
                Text("Desafio 3").tag(2)
            }
            .pickerStyle(SegmentedPickerStyle())
            
            Spacer()
            
            if selectedExampleIndex == 0 {
                Challenge1View()
            } else if selectedExampleIndex == 1 {
                Challenge2View()
            } else {
                Challenge3View()
            }
            Spacer()
        }
        .padding()
    }
}
let contentView = ContentView()
PlaygroundPage.current.setLiveView(contentView)
//#-end-hidden-code
